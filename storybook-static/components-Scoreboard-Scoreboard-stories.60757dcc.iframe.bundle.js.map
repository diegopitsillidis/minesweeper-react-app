{"version":3,"file":"components-Scoreboard-Scoreboard-stories.60757dcc.iframe.bundle.js","mappings":";;;;;;;;;AAuBA;;;;;;;ACIA;;;;;;AAQA;;;;;;;;ACGA;;;;;ACIA","sources":["webpack://my-app/./src/components/Scoreboard/Counter.tsx","webpack://my-app/./src/components/Scoreboard/Level.tsx","webpack://my-app/./src/components/Scoreboard/Reset.tsx","webpack://my-app/./src/components/Scoreboard/Scoreboard.tsx"],"sourcesContent":["import React, {FC} from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nexport interface CounterProps {\r\n    /**\r\n     * Number in the counter\r\n     */\r\n    children: string;\r\n}\r\n\r\nexport const Counter: FC<CounterProps> = ({ children}) => (\r\n    <Frame>{children}</Frame>\r\n);\r\n\r\nconst Frame = styled.div`\r\n    display: inline-block;\r\n    padding: 0 0.3vw;\r\n    color: #ec433c;\r\n    border: 0.15vw inset;\r\n    line-height: 2vw;\r\n    letter-spacing: 0.05em;\r\n    background: #333;\r\n    text-shadow: 0 0 0.1vw #ec433c;\r\n`;","import React, {FC} from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nexport interface LevelProps {\r\n    /**\r\n     * Array of possible game levels\r\n     */\r\n    children: string[];\r\n}\r\n\r\nexport const Level: FC<LevelProps> = ({children}) => (\r\n    <Select>\r\n        {children.map((item: string) => (\r\n        <Option key={item} value={item}>\r\n            {item}\r\n        </Option>\r\n        ))}\r\n    </Select>\r\n);\r\n\r\nconst Select = styled.select`\r\n    margin: 0;\r\n    height: 2.5vw;\r\n    border-radious:0;\r\n    border: 0.15vw solid;\r\n    border-color: white #9e9e9e #9e9e9e white;\r\n    background: #d1d1d1;\r\n`;\r\n\r\nconst Option = styled.option`\r\n    font-weight: normal;\r\n    display: block;\r\n    white-space: nowrap;\r\n    min-height: 1.2em;\r\n    padding: 0 0.2vw 0.2vw;\r\n`;","import React, {FC} from \"react\";\r\nimport styled from \"@emotion/styled\";\r\nimport { useMouseDown } from \"@/components/hooks/useMouseDown\";\r\n\r\nexport interface ResetProps {\r\n    /**\r\n     * \r\n     * Reset action handler\r\n     */\r\n    onReset: () => void;\r\n}\r\n\r\nexport const Reset: FC<ResetProps> = ({ onReset }) => {\r\n    const [mouseDown, onMouseDown, onMouseUp] = useMouseDown();\r\n\r\n    return (\r\n        <Button \r\n            onMouseDown={onMouseDown} \r\n            onMouseUp={onMouseUp}\r\n            onMouseLeave={onMouseUp}\r\n            onClick={onReset}\r\n            >\r\n                {mouseDown ? 'ðŸ˜²' : 'ðŸ˜Š'}\r\n        </Button>\r\n     );\r\n};\r\n\r\n\r\n\r\n\r\nconst Button = styled.button`\r\n    font-size: 1.5vw;\r\n    cursor: pointer;\r\n    font-weight: 700;\r\n    border-width: 0.15vw;\r\n    border-style: solid;\r\n    background: #d1d1d1;\r\n    border-color: white #9e9e9e #9e9e9e white;\r\n`;","import React, { FC } from \"react\";\r\nimport styled from '@emotion/styled';\r\n\r\nimport { Counter } from './Counter';\r\nimport { Level } from './Level';\r\nimport { Reset } from './Reset';\r\n\r\nexport interface ScoreboardProps {\r\n    /**\r\n     * Timer\r\n     */\r\n    time: string;\r\n    /**\r\n     * Possible game scenarios\r\n     */\r\n    levels: string[];\r\n    /**\r\n     * Action handler when the GameReset button is clicked\r\n     */\r\n    onReset: () => void;\r\n    /**\r\n     * Bombs in the field\r\n     */\r\n    mines: string;\r\n}\r\n\r\nexport const Scoreboard: FC<ScoreboardProps> = ({\r\n    time, levels, mines, onReset\r\n}) => (\r\n    <Wrapper>\r\n        <Counter>{time}</Counter>\r\n        <Level>{levels}</Level>\r\n        <Reset onReset={onReset}/>\r\n        <Counter>{mines}</Counter>\r\n    </Wrapper>\r\n);\r\n\r\nconst Wrapper = styled.div`\r\n    display: flex;\r\n    width: max-content;\r\n    padding-bottom: 2vw;\r\n    justify-content: space-between;\r\n`;"],"names":[],"sourceRoot":""}