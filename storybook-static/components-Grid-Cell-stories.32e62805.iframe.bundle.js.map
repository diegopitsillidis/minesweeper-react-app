{"version":3,"file":"components-Grid-Cell-stories.32e62805.iframe.bundle.js","mappings":";;;;;;;;;;AAoHA;;;;AAKA;;;AAsBA;;;;AAIA;;;;;AAOA;;AAIA;;;AArCA;;;;AA8CA;;AAIA","sources":["webpack://my-app/./src/components/Grid/Cell.tsx"],"sourcesContent":["import React, { FC } from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\nimport {Cell as CellType, CellState, Coords } from '@/helpers/Field'\r\nimport { useMouseDown } from '@/hooks/useMouseDown';\r\n\r\nexport interface CellProps {\r\n    /**\r\n     * Cell status based on the CellType\r\n     */\r\n    children: CellType;\r\n    /**\r\n     * Cell coordinates\r\n     */\r\n    coords: Coords;\r\n    /**\r\n     * onClick by cell handler\r\n     */\r\n    onClick: (coords: Coords) => void;\r\n    /**\r\n     * onContextMenu by cell handler\r\n     */\r\n    onContextMenu: (coords: Coords) => void;\r\n};\r\n\r\nexport const isActiveCell = (cell: CellType): boolean =>\r\n    [CellState.hidden, CellState.flag, CellState.weakFlag].includes(cell);\r\n\r\nexport const Cell: FC<CellProps> = ({ children, coords, ...rest }) => {\r\n    const [mouseDown, onMouseDown, onMouseUp] = useMouseDown();\r\n\r\n    const onClick = () => rest.onClick(coords);\r\n\r\n    const onContextMenu = (elem: React.MouseEvent<HTMLElement>) => {\r\n        /**\r\n         * Prevent context menu by default\r\n         */\r\n        elem.preventDefault();\r\n\r\n        if(isActiveCell(children)) {\r\n            rest.onContextMenu(coords)\r\n        }\r\n    };\r\n\r\n    const props = {\r\n        onClick,\r\n        onContextMenu,\r\n        onMouseDown,\r\n        onMouseUp,\r\n        onMouseLeave: onMouseUp,\r\n        mouseDown,\r\n        'data-testid': `${children}_${coords}`,\r\n    };\r\n\r\n    return <ComponentsMap {...props}>{children}</ComponentsMap>\r\n};\r\n\r\ninterface ComponentsMapProps {\r\n    children: CellType;\r\n    onClick: (elem: React.MouseEvent<HTMLElement>) => void;\r\n    onContextMenu: (elem: React.MouseEvent<HTMLElement>) => void;\r\n    onMouseDown: () => void;\r\n    onMouseUp: () => void;\r\n    onMouseLeave: () => void;\r\n    mouseDown: boolean\r\n    'data-testid'?: string;\r\n}\r\n\r\nconst ComponentsMap: FC<ComponentsMapProps> = ({children, ...rest}) => {\r\n    const nonActiveCellProps = {\r\n        onContextMenu: rest.onContextMenu,\r\n        'data-testid': rest['data-testid']\r\n    };\r\n    \r\n    switch (children) {\r\n        case CellState.empty:\r\n            return <RevealedFrame  {...nonActiveCellProps} />;\r\n        case CellState.bomb:\r\n            return (\r\n                <BombFrame {...nonActiveCellProps}>\r\n                    <Bomb/>\r\n                </BombFrame>\r\n            );\r\n        case CellState.hidden:\r\n            return <ClosedFrame {...rest} />;\r\n        case CellState.flag:\r\n            return (\r\n                <ClosedFrame {...rest}>\r\n                    <Flag/>\r\n                </ClosedFrame>\r\n            );\r\n        case CellState.weakFlag:\r\n            return (\r\n                <ClosedFrame {...rest}>\r\n                    <WeakFlag />\r\n                </ClosedFrame>\r\n            );\r\n        default:\r\n            return <RevealedFrame {...nonActiveCellProps}>{children}</RevealedFrame>;\r\n    }\r\n};\r\n\r\ninterface ClosedFrameProps {\r\n    mouseDown?: boolean;\r\n}\r\n\r\nexport const ClosedFrame = styled.div<ClosedFrameProps>`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    user-select: none;\r\n    cursor: pointer;\r\n    width: 1.8vw;\r\n    height: 1.8vw;\r\n    background-color: #d1d1d1;\r\n    border: 0.6vh solid transparent;\r\n    border-color: ${({mouseDown = false}) =>\r\n        mouseDown ? 'transparent' : 'white #9e9e9e #9e9e9e white'};\r\n    &:hover {\r\n        filter: brightness(1.1);\r\n    }\r\n`;\r\n\r\nconst transparent = 'rgba(0,0,0,0)';\r\nconst colors: { [key in CellType]: string } = {\r\n    0: '#000',\r\n    1: '#2a48ec',\r\n    2: '#2bb13d',\r\n    3: '#ec6561',\r\n    4: '#ec6561',\r\n    5: '#a6070f',\r\n    6: '#e400af',\r\n    7: '#906a02',\r\n    8: '#fa0707',\r\n    9: transparent,\r\n    10: transparent,\r\n    11: transparent,\r\n    12: transparent,\r\n};\r\n\r\nconst RevealedFrame = styled(ClosedFrame)`\r\n    border-color: #dddddd;\r\n    cursor: default;\r\n    color: ${({ children }) => colors[children as CellType] ?? transparent};\r\n    &:hover {\r\n        filter: brightness(1);\r\n    }\r\n`;\r\n\r\nconst Bomb = styled.div`\r\n    border-radius: 50%;\r\n    width: 1vw;\r\n    height: 1vw;\r\n    background-color: #333;\r\n`;\r\n\r\nconst BombFrame = styled(RevealedFrame)`\r\n    background-color: #ec433c;\r\n`;\r\n\r\nconst Flag = styled.div`\r\n    width: 0px;\r\n    height: 0px;\r\n    color: ${transparent};\r\n    border-top: 0.5vw solid transparent;\r\n    border-bottom: 0.5vw solid transparent;\r\n    border-left: 0.5vw solid #ec433c;\r\n`;\r\n\r\nconst WeakFlag = styled(Flag)`\r\n    border-left: 0.5vw solid #f19996\r\n`;"],"names":[],"sourceRoot":""}